/*
 * build
 * Copyright (c) 2018-2019 Federico Berti
 * Last modified: 07/10/19 13:09
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

//version dateString
def dateString = getDate()
group 'com.fberti.genesis'

version dateString + '-SNAPSHOT'
def jarNameHead = rootProject.name + "-" + version


apply plugin: 'java'

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

dependencies {
    testCompile group: 'junit', name: 'junit', version: '4.13'
    testCompile group: 'net.java.jinput', name: 'tests', version: '2.0.9'
    // https://mvnrepository.com/artifact/net.java.jinput/jinput
    compile group: 'net.java.jinput', name: 'jinput', version: '2.0.9'
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-core
    compile group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.13.0'
    // https://mvnrepository.com/artifact/com.google.guava/guava
    compile group: 'com.google.guava', name: 'guava', version: '28.2-jre'
    // https://mvnrepository.com/artifact/net.sf.emustudio/emuLib
    compile group: 'net.sf.emustudio', name: 'emuLib', version: '9.0.1'
    compile group: 'org.jctools', name: 'jctools-core', version: '3.0.0'

    //include local jars
    compile fileTree(dir: 'lib', include: ['*.jar'])
    testCompile fileTree(dir: 'lib', include: ['*.jar'])
    testCompile fileTree(dir: 'privateLib', include: ['*.jar'])
}



def getDate() {
    String date = new Date().format('yyMMdd')
    date.substring(0,2) + "." + date.substring(2)
}



//create a single Jar with all dependencies
task fatJar(type: Jar) {
    manifest {
        attributes 'Implementation-Title': 'Helios',
                'Implementation-Version': version,
                'Main-Class': 'omegadrive.SystemLoader'
    }
    baseName = project.name + "-all"//+ version
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    from {
        ["CREDITS.md", "README.md", "HISTORY.md", "LICENSE.md", "helios.properties"]
    }
    from("bios"){
        include "*.rom"
    }
    with jar
    doLast {
        println("Creating fatJar in folder: " + destinationDir)
    }
}

task copyRes {
    copy {
        from (".") {
            include "res/**"
        }
        into "$buildDir/packageDir"
        exclude "**/*.col"
    }
    copy {
        from {
            ["CREDITS.md", "README.md", "HISTORY.md",
             "LICENSE.md", "helios.properties"]
        }
        into "$buildDir/packageDir"
    }
    copy {
        from (".") {
            include "lib/**"
        }
        into "$buildDir/packageDir"
    }
    copy {
        from configurations.runtime
        into "$buildDir/packageDir/lib"
    }
    copy {
        from("privateLib") {
            exclude "misc/**"
            exclude "src/**"
            exclude "jna*.jar"
        }
        into "$buildDir/packageDir/lib"
    }
    copy {
        from ("res")
            include "*.properties"
        into "$buildDir/packageDir"
    }
}

jar {
    manifest {
        attributes 'Implementation-Title': 'Helios',
                   'Implementation-Version': version,
                   'Main-Class': 'omegadrive.SystemLoader',
                   'Class-Path': configurations.compile.collect { "lib/" + it.getName() }.join(' ')
    }
    archivesBaseName = rootProject.name
    destinationDir = file("$buildDir/packageDir")
    doLast {
        println("Creating jar in folder: " + destinationDir)
    }
}


task packageDistribution(type: Zip) {
    dependsOn "jar", "copyRes", "writeToFile"
    archiveName = jarNameHead + ".zip"
    destinationDir = file("$buildDir/dist")

    from "$buildDir/packageDir"
    doLast {
        println("Creating package: " + archiveName +
                ", folder: " + destinationDir)
    }
}

task writeToFile {
    String jarName = jarNameHead + ".jar"
    // sample list.(you already have it as extra.files.collect { file -> file.name })
    List<String> sampleBase = [ "java", "-XX:AutoBoxCacheMax=65536",
                            "-Dlog4j.configurationFile=./log4j2.properties",
                            "-jar", "$jarName" , "\"\$@\"", "\n"] as String[]
    List<String> sampleUx = sampleBase.clone()
    sampleUx.add("\"\$@\"" + "\n")
    List<String> sampleWin = sampleBase.clone()
    sampleWin.add("\"%1\"" + "\n")
    // create the folders if it does not exist.(otherwise it will throw exception)
    File extraFolder = new File( "${buildDir}/packageDir")
    if( !extraFolder.exists() ) {
        extraFolder.mkdirs()
    }
    // create the file and write text to it.
    new File("${buildDir}/packageDir/launcher.sh").text = sampleUx.join (" ")
    new File("${buildDir}/packageDir/launcher.bat").text = sampleWin.join (" ")
}
